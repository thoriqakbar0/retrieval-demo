name: Build and Deploy to Dokku

on:
  push:
    branches: [main]

jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Generate unique tag
        id: tag
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/retrieval-demo-web:${{ steps.tag.outputs.tag }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/retrieval-demo-web:latest
          build-args: |
            POSTGRES_URL=${{ secrets.POSTGRES_URL }}
            API_URL=${{ secrets.API_URL }}

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Generate unique tag
        id: tag
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./back
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/retrieval-demo-back:${{ steps.tag.outputs.tag }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/retrieval-demo-back:latest
          secrets: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
            S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-web, build-backend]
    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DOKKU_DEPLOY_KEY }}

      - name: Deploy to Dokku
        run: |
          echo "Starting deployment..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -v root@${{ secrets.DOKKU_HOST }} << 'EOF'
            set -ex
            # Create network if it doesn't exist
            if ! docker network inspect retrieval-demo-back >/dev/null 2>&1; then
              echo 'Creating retrieval-demo-back network...'
              docker network create retrieval-demo-back
            fi

            echo 'Pulling latest Web image...'
            docker pull thorthorq/retrieval-demo-web:latest

            echo 'Rebuilding Web app...'
            dokku ps:rebuild retrieval-demo || true
            dokku git:from-image retrieval-demo thorthorq/retrieval-demo-web:latest || true
            dokku config:set --no-restart retrieval-demo POSTGRES_URL=${{ secrets.POSTGRES_URL }}
            
            echo 'Pulling latest Backend image...'
            docker pull thorthorq/retrieval-demo-back:latest

            echo 'Rebuilding Backend app...'
            dokku ps:rebuild retrieval-demo-back || true
            dokku git:from-image retrieval-demo-back thorthorq/retrieval-demo-back:latest || true
            dokku config:set --no-restart retrieval-demo-back POSTGRES_URL=${{ secrets.POSTGRES_URL }}
            dokku config:set --no-restart retrieval-demo-back S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
            dokku config:set --no-restart retrieval-demo-back S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}

            echo 'Configuring Nginx for larger payloads...'
            dokku nginx:set retrieval-demo-back client-max-body-size 50M
            dokku proxy:build-config retrieval-demo-back

            echo 'Deployment complete!'
          EOF
